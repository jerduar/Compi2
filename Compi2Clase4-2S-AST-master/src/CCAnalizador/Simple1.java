/* Simple1.java */
/* Generated By:JavaCC: Do not edit this line. Simple1.java */
package CCAnalizador;

public class Simple1 implements Simple1Constants {
  public static void main(String args[]) throws ParseException {
    Simple1 parser = new Simple1(new java.io.StringReader("56+9+5"));
    parser.S();
    System.out.println("Exito!!");
  }

  final public nodo S() throws ParseException {nodo e1;
    e1 = E();
    jj_consume_token(0);
nodo n1 = new nodo();
                n1.setEtiqueta("inicio");
                nodo ini=(nodo) e1;
                n1.AddHijos(ini);
                {if ("" != null) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo E() throws ParseException {nodo e1; nodo e2;
    e1 = T();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 6:
      case 7:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 6:{
        jj_consume_token(6);
        e2 = T();
nodo n1 = new nodo();
            n1.setEtiqueta("+");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
        }
      case 7:{
        jj_consume_token(7);
        e2 = T();
nodo n1 = new nodo();
            n1.setEtiqueta("-");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo T() throws ParseException {nodo e1; nodo e2;
    e1 = F();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:
      case 9:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:{
        jj_consume_token(8);
        e2 = F();
nodo n1 = new nodo();
            n1.setEtiqueta("*");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
        }
      case 9:{
        jj_consume_token(9);
        e2 = F();
nodo n1 = new nodo();
            n1.setEtiqueta("/");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo F() throws ParseException {nodo e1; Token e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      e2 = jj_consume_token(NUM);
nodo n1 = new nodo();
            n1.setEtiqueta("numero");
            n1.setValor(Integer.parseInt(e2.image));
            n1.setColumna(e2.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
            n1.setLinea(e2.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        {if ("" != null) return n1;}
      break;
      }
    case 10:{
      jj_consume_token(10);
      e1 = E();
      jj_consume_token(11);
nodo n1=(nodo)e1;
        {if ("" != null) return n1;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public Simple1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0xc0,0x300,0x300,0x420,};
   }

  /** Constructor with InputStream. */
  public Simple1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Simple1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Simple1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Simple1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Simple1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Simple1(Simple1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Simple1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
