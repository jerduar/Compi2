/* Generated By:JavaCC: Do not edit this line. Analizador_Lienzo.java */
package AnalizadorCC;

public class Analizador_Lienzo implements Analizador_LienzoConstants {
 public static void main(String args[]) throws ParseException {
    Analizador_Lienzo parser = new Analizador_Lienzo(new java.io.StringReader("56+9+5"));
    parser.INICIO();
    System.out.println("Exito!!");
  }

  final public nodo INICIO() throws ParseException {
                nodo e1;
    e1 = S();
    jj_consume_token(0);
        nodo n1 = new nodo();
        n1.setEtiqueta("INICIO");
        nodo ini =  (nodo) e1;
        n1.AddHijos(ini);
        {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo S() throws ParseException {
          nodo e1; nodo e2, retorno = new nodo(); Token tok1,tok2,tok3,tok4,tok5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLICO:
    case PRIVADO:
    case PROTEGIDO:
      e1 = Ambito();
      tok1 = jj_consume_token(LIENZO);
      tok2 = jj_consume_token(IDENTIFICADOR);
      e2 = P();
                retorno.setEtiqueta("S");
                retorno.AddHijos(e1);
                retorno.AddHijos(tok1.image);
                retorno.AddHijos("IDENTIFICADOR",tok2.image);
                retorno.AddHijos(e2);
                {if (true) return retorno;}
      break;
    case LIENZO:
      tok1 = jj_consume_token(LIENZO);
      tok2 = jj_consume_token(IDENTIFICADOR);
      e2 = P();
                retorno.setEtiqueta("S");
                retorno.AddHijos(tok1.image);
                retorno.AddHijos("IDENTIFICADOR",tok2.image);
                retorno.AddHijos(e2);
                {if (true) return retorno;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo P() throws ParseException {
            nodo nodo1,nodo2; Token tok1; Token tok2; Token tok3; nodo auxiliar;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTIENDE:
      tok1 = jj_consume_token(EXTIENDE);
      auxiliar = ListaIds();
      tok2 = jj_consume_token(ABRE);
      nodo2 = ListaSentencias();
      tok3 = jj_consume_token(CIERRE);
        nodo1 = new nodo();
        nodo1.setEtiqueta("P");
        nodo1.AddHijos(tok1.image);
        nodo1.AddHijos(auxiliar);
        nodo1.AddHijos(tok2.image);
        nodo1.AddHijos(nodo2);
        nodo1.AddHijos(tok3.image);
        {if (true) return nodo1;}
      break;
    case ABRE:
      tok1 = jj_consume_token(ABRE);
      nodo2 = ListaSentencias();
      tok2 = jj_consume_token(CIERRE);
        nodo1 = new nodo();
        nodo1.setEtiqueta("P");
        nodo1.AddHijos(tok1.image);
        nodo1.AddHijos(nodo2);
        nodo1.AddHijos(tok2.image);
        {if (true) return nodo1;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo ListaSentencias() throws ParseException {
                         nodo retorno = new nodo(); nodo n1,n2; retorno.setEtiqueta("ListaSentencias");
    n1 = Sentencia();
        retorno.AddHijos(n1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case CARACTER:
      case FALSE:
      case TRUE:
      case SI:
      case COMPROBAR:
      case HACER:
      case PARA:
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
      case VAR:
      case TENTERO:
      case TCADENA:
      case TBOOLEAN:
      case TDOBLE:
      case TCARACTER:
      case CONSERVAR:
      case VOID:
      case MIENTRAS:
      case PRINCIPAL:
      case IDENTIFICADOR:
      case 53:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      n2 = Sentencia();
        retorno.AddHijos(n2);
    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo Sentencia() throws ParseException {
                  nodo retorno,a=null; nodo aux = null; nodo aux2 = null; Token tok;
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSERVAR:
        jj_consume_token(CONSERVAR);
                              aux = new nodo(); aux.setEtiqueta("CONSERVAR");
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:
        a = Ambito();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        retorno = DecAsig();
        jj_consume_token(47);
    if(a!=null)retorno.hijos.add(0,a);
    if(aux2!=null)retorno.hijos.add(0,aux2);
    if(aux!= null)retorno.hijos.add(0,aux);
        break;
      case TENTERO:
      case TCADENA:
      case TBOOLEAN:
      case TDOBLE:
      case TCARACTER:
        retorno = Funcion();
    if(a!=null)retorno.hijos.add(0,a);
    if(aux2!=null)retorno.hijos.add(0,aux2);
    if(aux!=null)retorno.hijos.add(0,aux);
        break;
      case VOID:
      case IDENTIFICADOR:
        retorno = Procedimiento();
    if(a!=null)retorno.hijos.add(0,a);
    if(aux2!=null)retorno.hijos.add(0,aux2);
    if(aux != null)retorno.hijos.add(0,aux);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return retorno;}
    } else if (jj_2_2(2)) {
      aux2 = F();
      jj_consume_token(48);
      aux = F();
        retorno = new nodo();
        retorno.setEtiqueta("MASIGUAL");
        retorno.AddHijos(aux2);
        retorno.AddHijos(aux);
    } else if (jj_2_3(2)) {
      aux2 = F();
      jj_consume_token(49);
      aux = F();
        retorno = new nodo();
        retorno.setEtiqueta("MENOSIGUAL");
        retorno.AddHijos(aux2);
        retorno.AddHijos(aux);
    } else if (jj_2_4(2)) {
      retorno = Asig();
      jj_consume_token(47);
        {if (true) return retorno;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SI:
        retorno = Si();
        {if (true) return retorno;}
        break;
      case COMPROBAR:
        retorno = Comprobar();
        {if (true) return retorno;}
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_5(2)) {
          retorno = inc_dec();
          jj_consume_token(47);
        {if (true) return retorno;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HACER:
            retorno = hacer_mientras();
        {if (true) return retorno;}
            break;
          case MIENTRAS:
            retorno = mientras();
        {if (true) return retorno;}
            break;
          case PARA:
            retorno = para();
        {if (true) return retorno;}
            break;
          case PRINCIPAL:
            retorno = MAIN();
        {if (true) return retorno;}
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo Sentencia2() throws ParseException {
                   nodo retorno; nodo aux = null; Token tok;
    if (jj_2_6(3)) {
      retorno = llamadaFP();
      jj_consume_token(47);
        {if (true) return retorno;}
    } else if (jj_2_7(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSERVAR:
        jj_consume_token(CONSERVAR);
                               aux = new nodo(); aux.setEtiqueta("CONSERVAR");
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      retorno = DecAsig();
      jj_consume_token(47);
    if(aux!= null)retorno.hijos.add(0,aux);
        {if (true) return retorno;}
    } else if (jj_2_8(3)) {
      retorno = Asig();
      jj_consume_token(47);
        {if (true) return retorno;}
    } else if (jj_2_9(2)) {
      retorno = menos_mas();
      jj_consume_token(47);
                                           {if (true) return retorno;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SI:
        retorno = Si();
        {if (true) return retorno;}
        break;
      case COMPROBAR:
        retorno = Comprobar();
        {if (true) return retorno;}
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_10(2)) {
          retorno = inc_dec();
          jj_consume_token(47);
        {if (true) return retorno;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HACER:
            retorno = hacer_mientras();
        {if (true) return retorno;}
            break;
          case MIENTRAS:
            retorno = mientras();
        {if (true) return retorno;}
            break;
          case PARA:
            retorno = para();
        {if (true) return retorno;}
            break;
          case CONTINUAR:
            jj_consume_token(CONTINUAR);
            jj_consume_token(47);
       retorno = new nodo();
       retorno.setEtiqueta("CONTINUAR");
            break;
          case PINTARS:
            retorno = PS();
            jj_consume_token(47);
        {if (true) return retorno;}
            break;
          case PINTAR_P:
            retorno = PP();
            jj_consume_token(47);
        {if (true) return retorno;}
            break;
          case PINTAR_OR:
            retorno = POR();
            jj_consume_token(47);
        {if (true) return retorno;}
            break;
          case RETORNO:
            tok = jj_consume_token(RETORNO);
            aux = EL1();
            jj_consume_token(47);
        retorno = new nodo();
        retorno.setEtiqueta("RETORNO");
        retorno.AddHijos(aux);
        {if (true) return retorno;}
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo menos_mas() throws ParseException {
                  nodo retorno,aux,aux2; Token tok;
    if (jj_2_11(2)) {
      aux2 = F();
      jj_consume_token(48);
      aux = EL1();
        retorno = new nodo();
        retorno.setEtiqueta("MASIGUAL");
        retorno.AddHijos(aux2);
        retorno.AddHijos(aux);
        {if (true) return retorno;}
    } else if (jj_2_12(2)) {
      aux2 = F();
      jj_consume_token(49);
      aux = EL1();
        retorno = new nodo();
        retorno.setEtiqueta("MENOSIGUAL");
        retorno.AddHijos(aux2);
        retorno.AddHijos(aux);
        {if (true) return retorno;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo ListaSentencias2() throws ParseException {
                          nodo retorno = new nodo(); nodo n1,n2; retorno.setEtiqueta("ListaSentencias2");
    n1 = Sentencia2();
        retorno.AddHijos(n1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case CARACTER:
      case FALSE:
      case TRUE:
      case SI:
      case COMPROBAR:
      case HACER:
      case PARA:
      case VAR:
      case CONSERVAR:
      case MIENTRAS:
      case CONTINUAR:
      case PINTARS:
      case PINTAR_P:
      case PINTAR_OR:
      case RETORNO:
      case IDENTIFICADOR:
      case 53:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      n2 = Sentencia2();
        retorno.AddHijos(n2);
    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo Dimensiones() throws ParseException {
                    nodo retorno = new nodo();nodo e1; retorno.setEtiqueta("DIMENSIONES"); Token tok, tok1;
    jj_consume_token(LLAVEA);
    e1 = EA1();
    jj_consume_token(LLAVEC);
        nodo u = new nodo();
        u.setEtiqueta("DIM");
        u.AddHijos("[");
        u.AddHijos(e1);
        u.AddHijos("]");
        retorno.AddHijos(u);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVEA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(LLAVEA);
      e1 = EA1();
      jj_consume_token(LLAVEC);
        nodo aux = new nodo();
        aux.setEtiqueta("DIM");
        aux.AddHijos("[");
        aux.AddHijos(e1);
        aux.AddHijos("]");
        retorno.AddHijos(aux);
    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo DecAsig() throws ParseException {
                  nodo retorno = new nodo(); Token tok, tok1;nodo e1,e2,e3; e3 = null;
    if (jj_2_14(3)) {
      tok = jj_consume_token(VAR);
      e2 = Tipo();
      e1 = ListaIds();
            retorno.AddHijos(tok.image);
            retorno.AddHijos(e2);
            retorno.AddHijos(e1);
            retorno.setEtiqueta("DEC");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
        e3 = EL1();
                          retorno.AddHijos("=");retorno.AddHijos(e3);retorno.setEtiqueta("DECASIG");
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
         {if (true) return retorno;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        tok = jj_consume_token(VAR);
        e2 = Tipo();
        tok1 = jj_consume_token(ARREGLO);
        e1 = ListaIds();
        e3 = Dimensiones();
            retorno.AddHijos(tok.image);
            retorno.AddHijos(e2);
            retorno.AddHijos(tok1.image);
            retorno.AddHijos(e1);
            retorno.AddHijos(e3);
            retorno.setEtiqueta("DECARRAY");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTERO:
        case DECIMAL:
        case CADENA:
        case CARACTER:
        case FALSE:
        case TRUE:
        case IGUAL:
        case IDENTIFICADOR:
        case 53:
          if (jj_2_13(2)) {
            jj_consume_token(IGUAL);
            jj_consume_token(50);
            e3 = ValArreglo();
            jj_consume_token(51);
            retorno.AddHijos(e3);
            retorno.setEtiqueta("DECASIGA");
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IGUAL:
              jj_consume_token(IGUAL);
              e3 = llamadaFP();
                                retorno.AddHijos(e3); retorno.setEtiqueta("DECASIGA");
              break;
            case ENTERO:
            case DECIMAL:
            case CADENA:
            case CARACTER:
            case FALSE:
            case TRUE:
            case IDENTIFICADOR:
            case 53:
              e3 = F();
                   retorno.AddHijos(e3); retorno.setEtiqueta("DECASIGA");
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
         {if (true) return retorno;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo ValArreglo() throws ParseException {
                    nodo e1, e2,retorno;retorno = new nodo();retorno.setEtiqueta("LISTAVAL"); e2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
    case DECIMAL:
    case CADENA:
    case CARACTER:
    case FALSE:
    case TRUE:
    case IDENTIFICADOR:
    case 53:
    case 72:
      e1 = EL1();
               retorno.AddHijos(e1);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_4;
        }
        jj_consume_token(52);
        e2 = EL1();
        retorno.AddHijos(e2);
      }
     {if (true) return retorno;}
      break;
    case 50:
      jj_consume_token(50);
      e1 = ValArreglo();
      jj_consume_token(51);
      label_5:
      while (true) {
        jj_consume_token(52);
        jj_consume_token(50);
        e2 = ValArreglo();
        jj_consume_token(51);
            nodo ret = new nodo();
            ret.setEtiqueta("VALORARREGLO");
            ret.AddHijos(e1);
            ret.AddHijos(e2);
            e1 = (nodo)ret;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
      }
     {if (true) return e1;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo Tipo() throws ParseException {
               nodo retorno = new nodo(); retorno.setEtiqueta("TIPO"); Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TENTERO:
      tok = jj_consume_token(TENTERO);
        retorno.setValor(tok.image);
        {if (true) return retorno;}
      break;
    case TCADENA:
      tok = jj_consume_token(TCADENA);
        retorno.setValor(tok.image);
        {if (true) return retorno;}
      break;
    case TBOOLEAN:
      tok = jj_consume_token(TBOOLEAN);
        retorno.setValor(tok.image);
        {if (true) return retorno;}
      break;
    case TDOBLE:
      tok = jj_consume_token(TDOBLE);
        retorno.setValor(tok.image);
        {if (true) return retorno;}
      break;
    case TCARACTER:
      tok = jj_consume_token(TCARACTER);
        retorno.setValor(tok.image);
        {if (true) return retorno;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo Asig() throws ParseException {
             nodo e1,e2 = null; nodo retorno; Token tok;
    tok = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVEA:
      e2 = Dimensiones();
      jj_consume_token(IGUAL);
      e1 = EL1();
        nodo aux = new nodo();
        aux.setEtiqueta("ASIG");
        nodo aux2 = new nodo();
        aux2.setEtiqueta("POSARRAY");
        if(e2!=null){aux2.AddHijos(e2); aux.setEtiqueta("ASIGARRAY");}
        aux2.AddHijos("IDENTIFICADOR",tok.image);
        aux.AddHijos(aux2);
        aux.AddHijos("=");
        aux.AddHijos(e1);
        retorno = aux;
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      e1 = EL1();
        nodo auxx = new nodo();
        auxx.setEtiqueta("ASIG");
        nodo aux22 = new nodo();
        aux22.setEtiqueta("IDENTIFICADOR");
        aux22.setValor(tok.image);
        auxx.AddHijos(aux22);
        auxx.AddHijos("=");
        auxx.AddHijos(e1);
        retorno = auxx;
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo F() throws ParseException {
          nodo e1 = new nodo(); nodo aux2; e1.setEtiqueta("F"); Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA:
      tok = jj_consume_token(CADENA);
        String aux = tok.image;
        aux = aux.replaceAll("\u005c"","");
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        e1.AddHijos("CADENA",aux);
        {if (true) return e1;}
      break;
    case ENTERO:
      tok = jj_consume_token(ENTERO);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        e1.AddHijos("ENTERO",tok.image);
        {if (true) return e1;}
      break;
    case DECIMAL:
      tok = jj_consume_token(DECIMAL);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        e1.AddHijos("DOBLE",tok.image);
        {if (true) return e1;}
      break;
    case CARACTER:
      tok = jj_consume_token(CARACTER);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        e1.AddHijos("CARACTER",tok.image);
        {if (true) return e1;}
      break;
    default:
      jj_la1[23] = jj_gen;
      if (jj_2_15(2)) {
        aux2 = llamadaFP();
        e1.AddHijos(aux2);
        {if (true) return e1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          tok = jj_consume_token(IDENTIFICADOR);
        nodo f = new nodo();f.setEtiqueta("IDENTIFICADOR");f.setValor(tok.image);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LLAVEA:
            aux2 = Dimensiones();
        nodo r = (nodo)f;
        f = new nodo();f.setEtiqueta("POSARRAY");
        f.AddHijos(r); f.AddHijos(aux2);
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
        e1.AddHijos(f);{if (true) return e1;}
          break;
        case 53:
          jj_consume_token(53);
          e1 = EA1();
          jj_consume_token(54);
        {if (true) return e1;}
          break;
        case TRUE:
          tok = jj_consume_token(TRUE);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        e1.AddHijos("BOOLEANO",tok.image);
        {if (true) return e1;}
          break;
        case FALSE:
          tok = jj_consume_token(FALSE);
        e1.AddHijos("BOOLEANO",tok.image);
        e1.setColumna(tok.beginColumn);//si no obtiene la posicion exacta intentar con e2.next.beginColumn
        e1.setLinea(tok.beginLine);    //si no obtiene la posicion exacta intentar con e2.next.beginLine
        {if (true) return e1;}
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo Ambito() throws ParseException {
                 Token e1; Token e2; Token e3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLICO:
      e1 = jj_consume_token(PUBLICO);
        nodo nodo1 = new nodo();
        nodo1.setEtiqueta("AMBITO");
        nodo1.setValor(e1.image);
        nodo1.setColumna(e1.beginColumn);
        nodo1.setLinea(e1.beginLine);
        {if (true) return nodo1;}
      break;
    case PRIVADO:
      e2 = jj_consume_token(PRIVADO);
        nodo nodo2 = new nodo();
        nodo2.setEtiqueta("AMBITO");
        nodo2.setValor(e2.image);
        nodo2.setColumna(e2.beginColumn);
        nodo2.setLinea(e2.beginLine);
        {if (true) return nodo2;}
      break;
    case PROTEGIDO:
      e3 = jj_consume_token(PROTEGIDO);
        nodo nodo3 = new nodo();
        nodo3.setEtiqueta("AMBITO");
        nodo3.setValor(e3.image);
        nodo3.setColumna(e3.beginColumn);
        nodo3.setLinea(e3.beginLine);
        {if (true) return nodo3;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public nodo ListaIds() throws ParseException {
                  Token tok; nodo n1 = new nodo(); n1.setEtiqueta("ListaIds"); Token tok2;
    tok2 = jj_consume_token(IDENTIFICADOR);
                          nodo n2 = new nodo(); n2.setValor(tok2.image);n2.setEtiqueta("IDENTIFICADOR");n1.AddHijos(n2);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
      jj_consume_token(52);
      tok = jj_consume_token(IDENTIFICADOR);
        nodo nuevo = new nodo();
        nuevo.setValor(tok.image);
        nuevo.setEtiqueta("IDENTIFICADOR");
        n1.AddHijos(nuevo);
    }
     {if (true) return n1;}
    throw new Error("Missing return statement in function");
  }

//EXPRESIONES ARITMETICAS
  final public nodo EA1() throws ParseException {
              nodo e1; nodo e2; nodo retorno;
    e1 = EA2();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 56:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
        e2 = EA2();
            nodo n1 = new nodo();
            n1.setEtiqueta("EA1");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos("+");
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
      case 56:
        jj_consume_token(56);
        e2 = EA2();
            nodo n2 = new nodo();
            n2.setEtiqueta("EA1");
            nodo izq1 = (nodo) e1;
            nodo der1 = (nodo) e2;
            n2.AddHijos(izq1);
            n2.AddHijos("-");
            n2.AddHijos(der1);
            e1= (nodo) n2;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            retorno = new nodo(); retorno.setEtiqueta("EA1");retorno.AddHijos(e1);{if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo EA3() throws ParseException {
            nodo e1; nodo e2; nodo retorno;
    e1 = F();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_8;
      }
      jj_consume_token(57);
      e2 = F();
        nodo n1 = new nodo();
        n1.setEtiqueta("EA3");
        n1.AddHijos((nodo)e1);
        n1.AddHijos("^");
        n1.AddHijos((nodo)e2);
        e1 = (nodo)n1;
    }
        retorno = new nodo(); retorno.setEtiqueta("EA3"); retorno.AddHijos(e1);{if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo EA2() throws ParseException {
            nodo e1; nodo e2; nodo retorno;
    e1 = EA3();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
      case 59:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        jj_consume_token(58);
        e2 = EA3();
            nodo n1 = new nodo();
            n1.setEtiqueta("EA2");
            nodo izq = (nodo) e1;
            nodo der = (nodo) e2;
            n1.AddHijos(izq);
            n1.AddHijos("*");
            n1.AddHijos(der);
            e1= (nodo) n1;
        break;
      case 59:
        jj_consume_token(59);
        e2 = EA3();
            nodo n2 = new nodo();
            n2.setEtiqueta("EA2");
            nodo izq1 = (nodo) e1;
            nodo der1 = (nodo) e2;
            n2.AddHijos(izq1);
            n2.AddHijos("/");
            n2.AddHijos(der1);
            e1= (nodo) n2;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         retorno = e1; retorno.setEtiqueta("EA2");{if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//EXPRESIONES RELACIONALES
  final public nodo ER1() throws ParseException {
             nodo e1; nodo e2;
    e1 = EA1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
        e2 = EA1();
        nodo nuevo = new nodo();
        nuevo.setEtiqueta("ER1");
        nuevo.AddHijos((nodo)e1);
        nuevo.AddHijos("==");
        nuevo.AddHijos((nodo)e2);
        e1 = (nodo)nuevo;
        break;
      case 61:
        jj_consume_token(61);
        e2 = EA1();
        nodo nuevo2 = new nodo();
        nuevo2.setEtiqueta("ER1");
        nuevo2.AddHijos((nodo)e1);
        nuevo2.AddHijos("<");
        nuevo2.AddHijos((nodo)e2);
        e1 = (nodo)nuevo2;
        break;
      case 62:
        jj_consume_token(62);
        e2 = EA1();
        nodo nuevo3 = new nodo();
        nuevo3.setEtiqueta("ER1");
        nuevo3.AddHijos((nodo)e1);
        nuevo3.AddHijos("<=");
        nuevo3.AddHijos((nodo)e2);
        e1 = (nodo)nuevo3;
        break;
      case 63:
        jj_consume_token(63);
        e2 = EA1();
        nodo nuevo4 = new nodo();
        nuevo4.setEtiqueta("ER1");
        nuevo4.AddHijos((nodo)e1);
        nuevo4.AddHijos(">");
        nuevo4.AddHijos((nodo)e2);
        e1 = (nodo)nuevo4;
        break;
      case 64:
        jj_consume_token(64);
        e2 = EA1();
        nodo nuevo5 = new nodo();
        nuevo5.setEtiqueta("ER1");
        nuevo5.AddHijos((nodo)e1);
        nuevo5.AddHijos(">=");
        nuevo5.AddHijos((nodo)e2);
        e1 = (nodo)nuevo5;
        break;
      case 65:
        jj_consume_token(65);
        e2 = EA1();
        nodo nuevo6 = new nodo();
        nuevo6.setEtiqueta("ER1");
        nuevo6.AddHijos((nodo)e1);
        nuevo6.AddHijos("!=");
        nuevo6.AddHijos((nodo)e2);
        e1 = (nodo)nuevo6;
        break;
      case 66:
        jj_consume_token(66);
        e2 = EA1();
        nodo nuevo7 = new nodo();
        nuevo7.setEtiqueta("ER1");
        nuevo7.AddHijos((nodo)e1);
        nuevo7.AddHijos("!&\u00a1");
        nuevo7.AddHijos((nodo)e2);
        e1 = (nodo)nuevo7;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

//EXPRESIONES LOGICAS
  final public nodo EL1() throws ParseException {
            nodo e1,e2;
    e1 = EL2();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
      case 68:
      case 69:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        jj_consume_token(67);
        e2 = EL2();
        nodo nuevo = new nodo();
        nuevo.setEtiqueta("EL1");
        nuevo.AddHijos((nodo)e1);
        nuevo.AddHijos("||");
        nuevo.AddHijos((nodo)e2);
        e1 = (nodo)nuevo;
        break;
      case 68:
        jj_consume_token(68);
        e2 = EL2();
        nodo nuevo2 = new nodo();
        nuevo2.setEtiqueta("EL1");
        nuevo2.AddHijos(e1);
        nuevo2.AddHijos("!||");
        nuevo2.AddHijos(e2);
        e1 = (nodo)nuevo2;
        break;
      case 69:
        jj_consume_token(69);
        e2 = EL2();
        nodo nuevo3 = new nodo();
        nuevo3.setEtiqueta("EL1");
        nuevo3.AddHijos(e1);
        nuevo3.AddHijos("&|");
        nuevo3.AddHijos(e2);
        e1 = (nodo)nuevo3;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo EL2() throws ParseException {
             nodo e1,e2;
    e1 = EL3();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
      case 71:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        jj_consume_token(70);
        e2 = EL3();
        nodo nuevo = new nodo();
        nuevo.setEtiqueta("EL2");
        nuevo.AddHijos(e1);
        nuevo.AddHijos("&&");
        nuevo.AddHijos(e2);
        e1 = (nodo)nuevo;
        break;
      case 71:
        jj_consume_token(71);
        e2 = EL3();
        nodo nuevo1 = new nodo();
        nuevo1.setEtiqueta("EL2");
        nuevo1.AddHijos(e1);
        nuevo1.AddHijos("!&&");
        nuevo1.AddHijos(e2);
        e1 = (nodo)nuevo1;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo EL3() throws ParseException {
              nodo e1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 72:
      jj_consume_token(72);
      e1 = ER1();
        nodo nuevo = new nodo();
        nuevo.setEtiqueta("EL3");
        nuevo.AddHijos("!");
        nuevo.AddHijos(e1);
        {if (true) return nuevo;}
      break;
    default:
      jj_la1[38] = jj_gen;
      if (jj_2_16(3)) {
        e1 = ER1();
                             {if (true) return e1;}
      } else if (jj_2_17(3)) {
        jj_consume_token(53);
        e1 = EL1();
        jj_consume_token(54);
                                      {if (true) return e1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTERO:
        case DECIMAL:
        case CADENA:
        case CARACTER:
        case FALSE:
        case TRUE:
        case IDENTIFICADOR:
        case 53:
          e1 = EA1();
                 {if (true) return e1;}
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

//FUNCIONES Y PROCEDIMIENTOS

    //FUNCIONES
  final public nodo Funcion() throws ParseException {
                nodo e1 = new nodo();e1.setEtiqueta("FUNCION");nodo e2; Token tok, tok2;
    //FUNCION CONSERVAR
        e2 = Tipo();
    tok = jj_consume_token(IDENTIFICADOR);
                          e1.AddHijos(e2); nodo aux = new nodo(); aux.setValor(tok.image); aux.setEtiqueta("IDENTIFICADOR");e1.AddHijos(aux);
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TENTERO:
    case TCADENA:
    case TBOOLEAN:
    case TDOBLE:
    case TCARACTER:
      e2 = ListaParam();
                          e1.AddHijos("(");e1.AddHijos(e2); e1.AddHijos(")");
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(54);
    tok = jj_consume_token(ABRE);
    e2 = ListaSentencias2();
    tok2 = jj_consume_token(CIERRE);
                                                         e1.AddHijos(tok.image);e1.AddHijos(e2);e1.AddHijos(tok2.image); {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public nodo Procedimiento() throws ParseException {
                        nodo e1,retorno,e2; retorno = new nodo(); retorno.setEtiqueta("PROCEDIMIENTO"); Token tok, tok2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      tok = jj_consume_token(VOID);
                  retorno.AddHijos(tok.image);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    tok = jj_consume_token(IDENTIFICADOR);
        nodo aux = new nodo();
        aux.setEtiqueta("IDENTIFICADOR");
        aux.setValor(tok.image);
        retorno.AddHijos(aux);
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TENTERO:
    case TCADENA:
    case TBOOLEAN:
    case TDOBLE:
    case TCARACTER:
      e1 = ListaParam();
                            retorno.AddHijos("(");retorno.AddHijos(e1); retorno.AddHijos(")");
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(54);
    tok = jj_consume_token(ABRE);
    e1 = ListaSentencias2();
    tok2 = jj_consume_token(CIERRE);
        retorno.AddHijos(tok.image);
        retorno.AddHijos(e1);
        retorno.AddHijos(tok2.image);
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo ListaParam() throws ParseException {
                   nodo e1, e2; Token tok, tok2; nodo retorno = new nodo(); retorno.setEtiqueta("LISTAPARAM");
    e1 = Tipo();
    tok = jj_consume_token(IDENTIFICADOR);
        nodo aux = new nodo();
        aux.setEtiqueta("PARAM");
        aux.AddHijos(e1);
        nodo aux2 = new nodo();
        aux2.setValor(tok.image);
        aux2.setEtiqueta("IDENTIFICADOR");
        aux.AddHijos(aux2);
        retorno.AddHijos(aux);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_12;
      }
      jj_consume_token(52);
      e2 = Tipo();
      tok2 = jj_consume_token(IDENTIFICADOR);
        nodo aux3 = new nodo();
        aux3.setEtiqueta("PARAM");
        aux3.AddHijos(e2);
        nodo aux4 = new nodo();
        aux4.setValor(tok2.image);
        aux4.setEtiqueta("IDENTIFICADOR");
        aux3.AddHijos(aux4);
        retorno.AddHijos(aux3);
    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//SETENCIA IF
  final public nodo Si() throws ParseException {
             Token tok,tok1,tok2; nodo e1,e2;
    tok = jj_consume_token(SI);
    jj_consume_token(53);
    e1 = ER1();
    jj_consume_token(54);
    tok1 = jj_consume_token(ABRE);
    e2 = ListaSentencias2();
    tok2 = jj_consume_token(CIERRE);
        nodo retorno = new nodo();
        retorno.setEtiqueta("SI");
        retorno.AddHijos(tok.image);
        retorno.AddHijos("(");
        retorno.AddHijos(e1);
        retorno.AddHijos(")");
        retorno.AddHijos(tok1.image);
        retorno.AddHijos(e2);
        retorno.AddHijos(tok2.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINO:
      tok = jj_consume_token(SINO);
      tok1 = jj_consume_token(ABRE);
      e1 = ListaSentencias2();
      tok2 = jj_consume_token(CIERRE);
        retorno.setEtiqueta("SINO");
        retorno.AddHijos(e1);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//SENTENCIA COMPROBAR
  final public nodo Comprobar() throws ParseException {
                  nodo e1,e2,e4,e3,def,e; e3 = new nodo();def = null;e3.setEtiqueta("LISTACASOS"); Token tok, tok1, tok2, tok3,tok4;
    tok = jj_consume_token(COMPROBAR);
    jj_consume_token(53);
    e = F();
    jj_consume_token(54);
    tok2 = jj_consume_token(ABRE);
    label_13:
    while (true) {
      tok3 = jj_consume_token(CASO);
      e1 = EL1();
      jj_consume_token(73);
      e2 = ListaSentencias2();
        nodo nuevo = new nodo();
        nuevo.setEtiqueta("CASO");
        nuevo.AddHijos(tok3.image);
        nuevo.AddHijos(e1);
        nuevo.AddHijos(e2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SALIR:
        tok4 = jj_consume_token(SALIR);
        jj_consume_token(47);
        nuevo.AddHijos(tok4.image);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
        e3.AddHijos(nuevo);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_13;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFECTO:
      jj_consume_token(DEFECTO);
      jj_consume_token(73);
      e4 = ListaSentencias2();
        def = new nodo();
        def.setEtiqueta("DEFAULT");
        def.AddHijos(e4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SALIR:
        jj_consume_token(SALIR);
        jj_consume_token(47);
        def.AddHijos("salir");
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    tok3 = jj_consume_token(CIERRE);
        nodo retorno = new nodo();
        retorno.setEtiqueta("COMPROBAR");
        retorno.AddHijos(tok.image);
        retorno.AddHijos(e);
        retorno.AddHijos(tok2.image);
        retorno.AddHijos(e3);
        if(def != null){retorno.AddHijos(def);}
        retorno.AddHijos(tok3.image);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//INCREMENTO/DECREMENTO
  final public nodo inc_dec() throws ParseException {
                nodo n2,n1;Token tok;
    n1 = F();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      jj_consume_token(74);
        n2 = new nodo();
        n2.setEtiqueta("DECR");
        n2.AddHijos(n1);
      break;
    case 75:
      jj_consume_token(75);
        n2 = new nodo();
        n2.setEtiqueta("INCR");
        n2.AddHijos(n1);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return n2;}
    throw new Error("Missing return statement in function");
  }

//MIENTRAS
  final public nodo mientras() throws ParseException {
                   nodo e1,e2; Token tok1,tok2,tok3;
    tok1 = jj_consume_token(MIENTRAS);
    jj_consume_token(53);
    e1 = EL1();
    jj_consume_token(54);
    tok2 = jj_consume_token(ABRE);
    e2 = ListaSentencias2();
    tok3 = jj_consume_token(CIERRE);
        nodo retorno = new nodo();
        retorno.setEtiqueta("MIENTRAS");
        retorno.AddHijos(tok1.image);
        retorno.AddHijos("(");
        retorno.AddHijos(e1);
        retorno.AddHijos(")");
        retorno.AddHijos(tok2.image);
        retorno.AddHijos(e2);
        retorno.AddHijos(tok3.image);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo hacer_mientras() throws ParseException {
                         nodo e1,e2;
    jj_consume_token(HACER);
    jj_consume_token(ABRE);
    e1 = ListaSentencias2();
    jj_consume_token(CIERRE);
    jj_consume_token(MIENTRAS);
    jj_consume_token(53);
    e2 = EL1();
    jj_consume_token(54);
    jj_consume_token(47);
        nodo retorno = new nodo();
        retorno.setEtiqueta("HACER_MIENTRAS");
        retorno.AddHijos("hacer");
        retorno.AddHijos("\u00bf");
        retorno.AddHijos(e1);
        retorno.AddHijos("?");
        retorno.AddHijos("mientras");
        retorno.AddHijos("(");
        retorno.AddHijos(e2);
        retorno.AddHijos(")");
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//SENTENCIA PARA
  final public nodo para() throws ParseException {
               nodo e1,e2,e3,e4;
    jj_consume_token(PARA);
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      e1 = DecAsig();
      break;
    case IDENTIFICADOR:
      e1 = Asig();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(76);
    e3 = EL1();
    jj_consume_token(76);
    if (jj_2_18(2)) {
      e2 = inc_dec();
    } else if (jj_2_19(2)) {
      e2 = Asig();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case CARACTER:
      case FALSE:
      case TRUE:
      case IDENTIFICADOR:
      case 53:
        e2 = menos_mas();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(54);
    jj_consume_token(ABRE);
    e4 = ListaSentencias2();
    jj_consume_token(CIERRE);
        nodo retorno = new nodo();
        retorno.setEtiqueta("PARA");
        retorno.AddHijos(e1);
        retorno.AddHijos(e3);
        retorno.AddHijos(e2);
        retorno.AddHijos(e4);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//LLAMADA A FUNCIOENS Y PROCEDIMIENTOS
  final public nodo llamadaFP() throws ParseException {
                  nodo e2 = null; Token tok;
    tok = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
    case DECIMAL:
    case CADENA:
    case CARACTER:
    case FALSE:
    case TRUE:
    case IDENTIFICADOR:
    case 53:
    case 72:
      e2 = LP();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(54);
        nodo retorno = new nodo();
        retorno.setEtiqueta("LLAMADO");
        retorno.AddHijos("IDENTIFICADOR",tok.image);
        if(e2 != null){retorno.AddHijos(e2);}
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public nodo LP() throws ParseException {
           nodo e1; nodo retorno = new nodo(); retorno.setEtiqueta("LP");
    e1 = EL1();
               retorno.AddHijos(e1);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_14;
      }
      jj_consume_token(52);
      e1 = EL1();
        retorno.AddHijos(e1);
    }
       {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//FUNCION PINTAR CADENA
  final public nodo PS() throws ParseException {
           nodo e1,e2,e3,e4;
    jj_consume_token(PINTARS);
    jj_consume_token(53);
    e1 = EL1();
    jj_consume_token(52);
    e2 = EL1();
    jj_consume_token(52);
    e3 = EL1();
    jj_consume_token(52);
    e4 = EL1();
    jj_consume_token(54);
        nodo retorno = new nodo();
        retorno.setEtiqueta("PS");
        retorno.AddHijos(e1);
        retorno.AddHijos(e2);
        retorno.AddHijos(e3);
        retorno.AddHijos(e4);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//PINTAR PUNTO
  final public nodo PP() throws ParseException {
           nodo e1,e2,e3,e4;
    jj_consume_token(PINTAR_P);
    jj_consume_token(53);
    e1 = EL1();
    jj_consume_token(52);
    e2 = EL1();
    jj_consume_token(52);
    e3 = EL1();
    jj_consume_token(52);
    e4 = EL1();
    jj_consume_token(54);
        nodo retorno = new nodo();
        retorno.setEtiqueta("PP");
        retorno.AddHijos(e1);
        retorno.AddHijos(e2);
        retorno.AddHijos(e3);
        retorno.AddHijos(e4);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//PINTAR OVALO/RECTANGULO
  final public nodo POR() throws ParseException {
            nodo e1,e2,e3,e4,e5,e6;
    jj_consume_token(PINTAR_OR);
    jj_consume_token(53);
    e1 = EL1();
    jj_consume_token(52);
    e2 = EL1();
    jj_consume_token(52);
    e3 = EL1();
    jj_consume_token(52);
    e4 = EL1();
    jj_consume_token(52);
    e5 = EL1();
    jj_consume_token(52);
    e6 = EL1();
    jj_consume_token(54);
        nodo retorno = new nodo();
        retorno.setEtiqueta("POR");
        retorno.AddHijos(e1);
        retorno.AddHijos(e2);
        retorno.AddHijos(e3);
        retorno.AddHijos(e4);
        retorno.AddHijos(e5);
        retorno.AddHijos(e6);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

//METODO MAIN
  final public nodo MAIN() throws ParseException {
             nodo e1;
    jj_consume_token(PRINCIPAL);
    jj_consume_token(53);
    jj_consume_token(54);
    jj_consume_token(ABRE);
    e1 = ListaSentencias2();
    jj_consume_token(CIERRE);
        nodo retorno = new nodo();
        retorno.setEtiqueta("PRINCIPAL");
        retorno.AddHijos(e1);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3_19() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(53)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(PROTEGIDO)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(CONSERVAR)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(PRIVADO)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(PUBLICO)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(LLAVEA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(CARACTER)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(ENTERO)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CONSERVAR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(TCARACTER)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(TDOBLE)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(TBOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(TCADENA)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(TENTERO)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public Analizador_LienzoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3900000,0x4400000,0xfb8c5fc0,0x0,0x3800000,0xf8000000,0x5000,0xc0000,0x0,0x5000,0xc0000,0x80c5fc0,0x0,0x0,0xfc0,0xfc0,0x8000000,0x0,0x0,0xfc0,0xf0000000,0x0,0x0,0x3c0,0xc00,0x3800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc0,0xf0000000,0x0,0xf0000000,0x0,0x2000,0x10000,0x8000,0x10000,0x20000,0x0,0x8000000,0xfc0,0xfc0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x20402f,0x2,0x0,0x4005,0x0,0x28,0x2,0x0,0x5d8,0x2045da,0x1000,0x800,0x204800,0x204800,0x0,0x100000,0x100000,0x244000,0x1,0x1800,0x1000,0x0,0x204000,0x0,0x100000,0x1800000,0x1800000,0x2000000,0xc000000,0xc000000,0xf0000000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x204000,0x1,0x4,0x1,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x204000,0x204000,0x100000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x38,0x38,0xc0,0xc0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0x100,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador_Lienzo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador_Lienzo(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Analizador_LienzoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador_Lienzo(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Analizador_LienzoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador_Lienzo(Analizador_LienzoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Analizador_LienzoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[77];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 77; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
