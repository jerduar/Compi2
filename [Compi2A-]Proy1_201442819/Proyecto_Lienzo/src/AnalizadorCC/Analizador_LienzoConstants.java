/* Generated By:JavaCC: Do not edit this line. Analizador_LienzoConstants.java */
package AnalizadorCC;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Analizador_LienzoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGIT = 5;
  /** RegularExpression Id. */
  int ENTERO = 6;
  /** RegularExpression Id. */
  int DECIMAL = 7;
  /** RegularExpression Id. */
  int CADENA = 8;
  /** RegularExpression Id. */
  int CARACTER = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int SI = 12;
  /** RegularExpression Id. */
  int SINO = 13;
  /** RegularExpression Id. */
  int COMPROBAR = 14;
  /** RegularExpression Id. */
  int CASO = 15;
  /** RegularExpression Id. */
  int SALIR = 16;
  /** RegularExpression Id. */
  int DEFECTO = 17;
  /** RegularExpression Id. */
  int HACER = 18;
  /** RegularExpression Id. */
  int PARA = 19;
  /** RegularExpression Id. */
  int LIENZO = 20;
  /** RegularExpression Id. */
  int CIERRE = 21;
  /** RegularExpression Id. */
  int ABRE = 22;
  /** RegularExpression Id. */
  int PUBLICO = 23;
  /** RegularExpression Id. */
  int PRIVADO = 24;
  /** RegularExpression Id. */
  int PROTEGIDO = 25;
  /** RegularExpression Id. */
  int EXTIENDE = 26;
  /** RegularExpression Id. */
  int VAR = 27;
  /** RegularExpression Id. */
  int TENTERO = 28;
  /** RegularExpression Id. */
  int TCADENA = 29;
  /** RegularExpression Id. */
  int TBOOLEAN = 30;
  /** RegularExpression Id. */
  int TDOBLE = 31;
  /** RegularExpression Id. */
  int TCARACTER = 32;
  /** RegularExpression Id. */
  int CONSERVAR = 33;
  /** RegularExpression Id. */
  int VOID = 34;
  /** RegularExpression Id. */
  int MIENTRAS = 35;
  /** RegularExpression Id. */
  int CONTINUAR = 36;
  /** RegularExpression Id. */
  int PRINCIPAL = 37;
  /** RegularExpression Id. */
  int PINTARS = 38;
  /** RegularExpression Id. */
  int PINTAR_P = 39;
  /** RegularExpression Id. */
  int PINTAR_OR = 40;
  /** RegularExpression Id. */
  int ARREGLO = 41;
  /** RegularExpression Id. */
  int RETORNO = 42;
  /** RegularExpression Id. */
  int IGUAL = 43;
  /** RegularExpression Id. */
  int LLAVEA = 44;
  /** RegularExpression Id. */
  int LLAVEC = 45;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "<DIGIT>",
    "<ENTERO>",
    "<DECIMAL>",
    "<CADENA>",
    "<CARACTER>",
    "\"false\"",
    "\"true\"",
    "\"si\"",
    "\"sino\"",
    "\"comprobar\"",
    "\"caso\"",
    "\"salir\"",
    "\"defecto\"",
    "\"hacer\"",
    "\"para\"",
    "\"Lienzo\"",
    "\"?\"",
    "\"\\u00bf\"",
    "\"publico\"",
    "\"privado\"",
    "\"protegido\"",
    "\"extiende\"",
    "\"var\"",
    "\"entero\"",
    "\"cadena\"",
    "\"booleano\"",
    "\"doble\"",
    "\"caracter\"",
    "\"conservar\"",
    "\"void\"",
    "\"mientras\"",
    "\"Continuar\"",
    "\"Principal\"",
    "\"Pintar_S\"",
    "\"Pintar_P\"",
    "\"Pintar_OR\"",
    "\"arreglo\"",
    "\"return\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "<IDENTIFICADOR>",
    "\"$\"",
    "\"+=\"",
    "\"-=\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"^\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"!&\\u00a1\"",
    "\"||\"",
    "\"!||\"",
    "\"&|\"",
    "\"&&\"",
    "\"!&&\"",
    "\"!\"",
    "\":\"",
    "\"--\"",
    "\"++\"",
    "\";\"",
  };

}
